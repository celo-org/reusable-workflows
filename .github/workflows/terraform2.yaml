---
name: 'Run Terraform Workflow'

on:
  workflow_call:
    inputs:
      module-dir:
        required: true
        type: string
      cluster-name:
        required: false
        type: string
      project:
        required: false
        type: string
      cluster-zone:
        required: false
        type: string
      cluster-region:
        required: false
        type: string
      service-account:
        required: true
        type: string
      run-gke-credentials:
        required: false
        type: boolean
        default: true

env:
  WORKDIR: ${{ inputs.module-dir }}
  KUBE_CONFIG_PATH: /home/runner/.kube/config
  USE_GKE_GCLOUD_AUTH_PLUGIN: True

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    permissions: # Must change the job token permissions to use JWT auth
      id-token: write
      contents: read
      pull-requests: write
    defaults:
      run:
        working-directory: ${{ env.WORKDIR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate Inputs
        run: |
          if [[ "${{ inputs.run-gke-credentials }}" == "true" ]]; then
            if [[ -z "${{ inputs.cluster-name }}" ]]; then
              echo "cluster-name must be set if run-gke-credentials is true."
              exit 1
            elif [[ -z "${{ inputs.project }}" ]]; then
              echo "project must be set if run-gke-credentials is true."
              exit 1
            elif [[ -z "${{ inputs.cluster-zone }}" && -z "${{ inputs.cluster-region }}" ]]; then
              echo "cluster-zone must be set if run-gke-credentials is true."
              exit 1
            fi
          fi

      # Pulls Environment variables from terraform.env for easy configuration across all workflows
      - name: Export Environment Variables
        uses: cardinalby/export-env-action@v2
        with:
          envFile: ./.github/workflows/terraform.env

      - id: auth-gcp-no-master
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v3
        with:
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ inputs.service-account }}
        if: github.ref != 'refs/heads/master'

      - id: auth-gcp-master
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v3
        with:
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER_MASTER }}
          service_account: ${{ inputs.service-account }}
        if: github.ref == 'refs/heads/master'

      - name: Set up Cloud SDK
        if: ${{ inputs.run-gke-credentials }}
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: 'core,gke-gcloud-auth-plugin'
    
      - name: Terraform Install
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: true

      # Workaround for error: 'Kubernetes cluster unreachable: invalid configuration:\
      # no configuration has been provided,
      # try setting KUBERNETES_MASTER environment variable':
      # https://github.com/terraform-aws-modules/terraform-aws-eks/issues/1234
      - name: Get cluster credentials
        if: ${{ inputs.run-gke-credentials }}
        run: |-
          # Split the gke parameters if multiple clusters are needed 
          # (e.g. for multi-cluster deployments like public-forno)
          # Arrays must have same number of elements
          # Valid input examples:
          # cluster-name: cluster1,cluster2; cluster-zone: us-central1-a,us-central1-b; cluster-region:
          # cluster-name: cluster1,cluster2; cluster-zone: ; cluster-region: us-central1,us-central1
          # cluster-name: cluster1; cluster-zone: us-central1-a; cluster-region:
          # Invalid:
          # cluster-name: cluster1,cluster2; cluster-zone: us-central1-a; cluster-region: us-central1
          IFS=',' read -ra CLUSTER_NAMES <<< "${{ inputs.cluster-name }}"
          IFS=',' read -ra CLUSTER_ZONES <<< "${{ inputs.cluster-zone }}"
          IFS=',' read -ra CLUSTER_REGIONS <<< "${{ inputs.cluster-region }}"
          len=${#CLUSTER_NAMES[@]}

          for (( i=0; i<len; i++ )); do
            cluster_zone="${CLUSTER_ZONES[i]}"
            cluster_region="${CLUSTER_REGIONS[i]}"
            cluster_name="${CLUSTER_NAMES[i]}"
            location_command=""
            if [[ -n $cluster_zone ]]; then
              location_command="--zone $cluster_zone"
            elif [[ -n $cluster_region ]]; then
              location_command="--region $cluster_region"
            else
              echo "cluster-zone or cluster-region must be set if run-gke-credentials is true."
              exit 1
            fi
            # shellcheck disable=SC2086
            gcloud container clusters get-credentials $cluster_name\
              --project ${{ inputs.project }} $location_command
          done

      - name: Terraform Init
        id: init
        run: terraform init
        shell: bash

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        shell: bash

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        shell: bash

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out=tfplan "-detailed-exitcode"
        shell: bash

      # Show Plan is used so we can get rid of all the "refreshing" comments that are noisy
      - name: Terraform Show Plan
        id: showplan
        run: terraform show tfplan "-no-color"
        continue-on-error: true
        shell: bash

      # Print the plan to file in this way to avoid problems with "'" in the plan
      - name: Print plan to file
        if: steps.plan.outputs.exitcode == '2'
        run: |
            cat > plan_temporal.txt <<'EOF'
            ${{ steps.showplan.outputs.stdout }}
            EOF
        shell: bash

      # Removes the refreshing from the plan output and then moves the + and - all the way
      # to the left of the pull request to trigger github's colors
      - name: Reformat Plan
        if: steps.plan.outputs.exitcode == '2'
        run: |
            sed -E 's/^([[:space:]]+)([-+])/\2\1/g' plan_temporal.txt > plan.txt
        shell: bash

      # Saves the plan in an environment variable so we can pull it back out
      - name: Put Plan in Env Var
        shell: bash
        if: steps.plan.outputs.exitcode == '2'
        run: |
          PLAN=$(cat plan.txt)
          check=${#PLAN}
          # Delimiting plan size to avoid error "Argument list too long" when posting the plan
          if [ "$check" -ge 65000 ];
          then
            PLAN='Terraform plan is too long to be posted in the PR comment. Please check the Action run to verify it'
          fi
          echo "$PLAN"
          { 
              echo "PLAN<<EOF"
              echo "$PLAN"
              echo "EOF"
          } >> "$GITHUB_ENV"

      - name: Post Plan to GitHub PR
        uses: mshick/add-pr-comment@b8f338c590a895d50bcbfa6c5859251edc8952fc # v2
        if: github.event_name == 'pull_request' && steps.plan.outputs.exitcode == '2'
        with:
          repo-token: ${{ github.token }}
          message-id: Plan ${{ inputs.module-dir }}
          message: |
            ### Terraform for ${{ inputs.module-dir }}\`
            #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            ```diff
            ${{ steps.validate.outputs.stdout }}
            ```           
            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            ```diff
            ${{ env.PLAN }}
            ```      
            </details>

            *Pusher: @${{ github.actor }}* 
            *Action: ${{ github.event_name }}*
            *Working Directory: ${{ env.WORKDIR }}*
            *Workflow: ${{ github.workflow }}*
            *Execution link: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}*

      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push' && steps.plan.outcome == 'success'
        shell: bash
        run: terraform apply -no-color -auto-approve "tfplan"

      - name: Post Apply output to GitHub PR after merging
        uses: mshick/add-pr-comment@b8f338c590a895d50bcbfa6c5859251edc8952fc # v2
        if: github.ref == 'refs/heads/master' && steps.plan.outputs.exitcode == '2'
        env:
          APPLY: "terraform\n${{ steps.apply.outputs.stdout }}"
        with:
          allow-repeats: true
          message-id: Apply ${{ inputs.module-dir }}
          repo-token: ${{ github.token }}
          message: |
            ### Terraform for ${{ inputs.module-dir }}\`
            #### Terraform Apply \`${{ steps.apply.outcome }}\`
            <details><summary>Show Apply</summary>
            ```diff
            ${{ env.APPLY }}
            ```
            </details>
            *Pusher: @${{ github.actor }}* 
            *Action: ${{ github.event_name }}*
            *Working Directory: ${{ env.WORKDIR }}*
            *Workflow: ${{ github.workflow }}*
            *Execution link: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}*
