---
name: 'Terraform plan and apply'

on:
  workflow_call:
    inputs:
      workload-id-provider:
        required: true
        type: string
        description: "Google workload identity provider for authentication"
      service-account:
        required: true
        type: string
        description: "Google service account for authentication"
      akeyless-api-gateway:
        required: false
        type: string
        description: "Akeyless API Gateway URL for secret management"
      akeyless-github-access-id:
        required: false
        type: string
        description: "Akeyless GitHub Access ID for secret management"
      working-dir:
        required: true
        type: string
        description: "Directory where Terraform commands will run"
      token-format:
        required: false
        type: string
        description: "Format of the token for authentication"
      access-token-scopes:
        required: false
        type: string
        description: "Scopes for the access token"
      timeout-minutes:
        default: 30
        type: number
        description: "Workflow timeout in minutes"
      environment:
        default: ''
        description: "Deployment environment in GitHub"
        type: string
      environment-url:
        default: ''
        description: "Deployment environment URL in Okta"
        type: string
      debug-enabled:
        default: false
        required: false
        type: boolean
        description: "Enable tmate for debugging"
      runs-on:
        default: "['self-hosted', 'org', 'terraform']"
        type: string
        description: "GitHub runner tags"
      trivy-enabled:
        default: true
        type: boolean
        description: "Enable Trivy security scans"
      trivy-timeout:
        default: 15m
        type: string
        description: "Timeout for Trivy scan"
      trivy-skip-dirs:
        type: string
        description: "Directories to skip during Trivy scan"
      trivy-severity:
        default: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
        type: string
        description: "Severity levels to include in Trivy scan"
      trivy-vuln-type:
        default: "os,library"
        type: string
        description: "Types of vulnerabilities to scan for"
      trivy-tf-vars:
        default: true
        type: boolean
        description: "Enable scanning of Terraform variables"
      pr-comment:
        default: true
        type: boolean
        description: "Post results as comments on pull requests"
      summary:
        default: true
        type: boolean
        description: "Add results to workflow summary"

jobs:
  terraform:
    runs-on: ${{ fromJson(inputs.runs-on) }}
    timeout-minutes: ${{ inputs.timeout-minutes }}
    defaults:
      run:
        working-directory: ${{ inputs.working-dir }}
        shell: bash
    environment:
      name: ${{ inputs.environment }}
      url: ${{ inputs.environment-url }}

    steps:
      # Debugging with tmate
      - name: Setup tmate session
        if: inputs.debug-enabled == true
        uses: mxschmitt/action-tmate@v3
        with:
          detached: true
          limit-access-to-actor: true

      # Harden runner for security
      - name: Harden Runner
        if: runner.environment == 'github-hosted'
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      # Checkout code
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Akeyless Get Secrets will take the specified dynamic or static secrets and set them to their corresponding environment variables.  It will also
      # export github's JWT Token as AKEYLESS_AUTH_JWT (which their terraform provider uses for JWT authentication, and AUTH_TOKEN - The akeyless auth token
      # it gets back after authenticating, which can be used for certain things (such as ansible)
      - name: Akeyless Get Secrets
        id: get_auth_token
        uses: docker://us-west1-docker.pkg.dev/devopsre/akeyless-public/akeyless-action:latest
        with:
          api-url: ${{ inputs.akeyless-api-gateway }}
          access-id: ${{ inputs.akeyless-github-access-id }}

      # Authenticate with Google Cloud
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ inputs.workload-id-provider }}
          service_account: ${{ inputs.service-account }}
          token_format: ${{ inputs.token-format }}
          access_token_scopes: ${{ inputs.access-token-scopes }}
          access_token_lifetime: '20m'

      - name: set terraform variables
        id: config-vars
        shell: bash
        run: |
          echo "TF_VAR_google_credentials=${{ steps.auth.outputs.access_token }}" >> $GITHUB_ENV
          echo "app-name=$(basename ${{ inputs.working-dir }})" >> $GITHUB_OUTPUT

      - name: Check if GHAS is Enabled
        uses: actions/github-script@v7
        id: ghas-check
        with:
          script: |
            const [owner, repo] = '${{ github.repository }}'.split("/");
            const res = await github.rest.repos.get({ owner, repo });
            const isPrivate = res.data.private;
            const hasGhas = res.data.security_and_analysis?.advanced_security?.status === 'enabled';
            if (isPrivate && !hasGhas) {
              core.warning('GHAS is NOT enabled and repo is private. Cannot upload SARIF.');
              return false;
            }
            return true;

      # Run Trivy Scan
      - name: Run Trivy Scan
        id: trivy-fs
        if: inputs.trivy-enabled
        uses: celo-org/trivy-composite-action@v1.0.0-refactor
        with:
          scan-type: fs
          scan-ref: ${{ inputs.working-dir }}
          timeout: ${{ inputs.trivy-timeout }}
          vuln-type: ${{ inputs.trivy-vuln-type }}
          severity: ${{ inputs.trivy-severity }}
          skip-dirs: ${{ inputs.trivy-skip-dirs }}
          tf-vars: ${{ inputs.trivy-tf-vars }}

      - name: Upload SARIF to Security Tab
        if: inputs.trivy-enabled &&fromJSON(steps.ghas-check.outputs.result)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.trivy-image.outputs.sarif-file }}
          category: terraform-${{ steps.config-vars.outputs.app-name }}

      # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: true

      # Terraform Init
      - name: Terraform Init
        run: terraform init

      # Terraform Format Check
      - name: Terraform Format
        run: terraform fmt -check

      # Terraform Validate
      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out=tfplan "-detailed-exitcode"
        shell: bash

      # Show Plan is used so we can get rid of all the "refreshing" comments that are noisy
      - name: Terraform Show Plan
        id: showplan
        run: terraform show tfplan "-no-color"
        continue-on-error: true
        shell: bash

      # Print the plan to file in this way to avoid problems with "'" in the plan
      - name: Print plan to file
        id: format-plan
        if: steps.plan.outputs.exitcode != '0'
        shell: bash
        env:
          ORIGINAL_FILENAME: ${{ steps.config-vars.outputs.app-name }}-plan.txt
          FORMATTED_FILENAME: ${{ steps.config-vars.outputs.app-name }}-formatted-plan.txt
        run: |
            cat > ${{ env.ORIGINAL_FILENAME }} <<'EOF'
            ${{ steps.showplan.outputs.stdout }}
            EOF
            echo original-plan=${{ env.ORIGINAL_FILENAME }} >> $GITHUB_OUTPUT

            # Removes the refreshing from the plan output and then moves the + and - all the way
            # to the left of the pull request to trigger github's colors
            sed -E 's/^([[:space:]]+)([-+])/\2\1/g' ${{ env.ORIGINAL_FILENAME }} > ${{ env.FORMATTED_FILENAME }}

            PLAN=$(cat ${{ env.FORMATTED_FILENAME }})
            check=${#PLAN}
            # Delimiting plan size to avoid error "Argument list too long" when posting the plan
            if [ "$check" -ge 65000 ];
            then
              PLAN='Terraform plan is too long to be posted in the PR comment. Please check the Action run to verify it'
            fi
            echo "$PLAN"
            {
              echo "formatted-plan<<EOF"
              echo "$PLAN"
              echo "EOF"
            } >> "$GITHUB_OUTPUT"

      - name: Upload Terraform Plan
        if: github.event_name == 'pull_request' && steps.plan.outputs.exitcode != '0'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-${{ steps.config-vars.outputs.app-name }}-plan.txt
          path: ${{ inputs.working-dir }}/${{ steps.format-plan.outputs.original-plan }}

      # Terraform Apply
      - name: Terraform Apply
        id: apply
        if: github.ref_name == github.event.repository.default_branch && github.event_name == 'push' && steps.plan.outcome == 'success' && steps.plan.outputs.exitcode == '2'
        run: |
          terraform apply -no-color -auto-approve "tfplan"
          echo "::set-output name=apply_output::$(terraform show -json tfplan | jq '.')"

      - name: Post Plan to Github PR
        if: github.event_name == 'pull_request' && inputs.pr-comment && steps.format-plan.outputs.formatted-plan != ''
        uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043
        env:
          WORKDIR: ${{ inputs.working-dir }}
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### Terraform for ${{ env.WORKDIR }}
            #### Terraform Format and Style üñå \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            ```diff
            ${{ steps.validate.outputs.stdout }}
            ```
            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            ```diff
            ${{ steps.format-plan.outputs.formatted-plan }}
            ```

            </details>

            *Pusher: @${{ github.actor }}*
            *Action: ${{ github.event_name }}*
            *Working Directory: ${{ env.WORKDIR }}*
            *Workflow: ${{ github.workflow }}*
            *Execution link: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}*


      - name: Build Report
        if: always() && github.ref_name == github.event.repository.default_branch && steps.apply.outputs.stdout != '' && ( inputs.summary || inputs.pr-comment )
        id: build-report
        shell: bash
        env:
          APPLY: "${{ steps.apply.outputs.stdout }}"
          WORKDIR: "${{ inputs.working-dir }}"
        run: |
          echo '${{ env.APPLY }}' > apply.txt
          {
              echo "### Terraform for ${{ env.WORKDIR }}"
              echo "#### Terraform Apply ${{ steps.apply.outcome }}"
              echo "<details><summary>Show Apply</summary>"
              echo ""
              echo '```'
              cat apply.txt
              echo '```'
              echo "</details>"
              echo ""
              echo "*Pusher: @${{ github.actor }}* \\"
              echo "*Action: ${{ github.event_name }}* \\"
              echo "*Working Directory: ${{ env.WORKDIR }}* \\"
              echo "*Workflow: ${{ github.workflow }}* \\"
              echo "*Execution link: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}* \\"
          } > 'report.txt'
          echo "report=report.txt" >> $GITHUB_OUTPUT     

      - name: Upload Apply Report
        if: always() && github.ref_name == github.event.repository.default_branch && steps.build-report.outputs.report != ''
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build-report.outputs.report  }}-apply.txt
          path: ${{ inputs.working-dir}}/${{ steps.build-report.outputs.report  }}

      - name: Post Apply Results to GitHub PR
        if: github.event_name == 'pull_request' && inputs.pr-comment && (steps.build-report.outputs.report != '')
        uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-path: "${{ inputs.working-dir }}/${{ steps.build-report.outputs.report }}"

      - name: Post Scan Results to Workflow Summary
        if: always() && github.ref_name == github.event.repository.default_branch && inputs.summary && steps.build-report.outputs.report != ''
        shell: bash
        run: |
          while IFS= read -r line; do
            echo $line >> $GITHUB_STEP_SUMMARY
          done < "${{ steps.build-report.outputs.report }}"
