---
name: 'Terraform plan'
on: 
  workflow_call:
    inputs:
      workload-id-provider:
        required: true
        type: string
      service-account:
        required: true
        type: string
      akeyless-api-gateway:
        required: true
        type: string
      akeyless-github-access-id:
        required: true
        type: string
      working-dir:
        required: true
        type: string
jobs:
  Terraform-Plan:
    runs-on: ubuntu-latest
    permissions: # Must change the job token permissions to use JWT auth
      contents: read
      id-token: write
    steps:
      - name: 'Checkout'
        uses: actions/checkout@e2f20e631ae6d7dd3b768f56a5d2af784dd54791

      # Akeyless Get Secrets will take the specified dynamic or static secrets and set them to their corresponding environment variables.  It will also
      # export github's JWT Token as AKEYLESS_AUTH_JWT (which their terraform provider uses for JWT authentication, and AUTH_TOKEN - The akeyless auth token
      # it gets back after authenticating, which can be used for certain things (such as ansible)
      - name: Akeyless Get Secrets
        id: get_auth_token
        uses: docker://us-docker.pkg.dev/clabs-secrets-and-permissions/public-images/akeyless-actions:latest
        with:
          api-url: ${{ inputs.akeyless-api-gateway }}
          access-id: ${{ inputs.akeyless-github-access-id }}

      # Uses Google workload identity federation to authenticate without keys, in security circle project.  Variables defined in security circle
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@ceee102ec2387dd9e844e01b530ccd4ec87ce955'
        with:
          workload_identity_provider: ${{ inputs.workload-id-provider }}
          service_account: ${{ inputs.service-account }}
          access_token_lifetime: '20m'

      - uses: hashicorp/setup-terraform@62a66eef78e1543742cc8fabf333a1abddc00d37
        with:
          terraform_wrapper: true
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -input=false

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out=tfplan  "-detailed-exitcode"
        continue-on-error: true

      - name: Terraform Show Plan
        id: showplan
        run: terraform show tfplan "-no-color"

        # Removes the refreshing from the plan output and then moves the + and - all the way to the left of the pull request to trigger github's colors
      - name: Reformat Plan
        shell: bash
        if:  steps.plan.outputs.exitcode == '2'
        run: |
              echo '${{ steps.showplan.outputs.stdout }}' | head -n -3 | grep -v "data\..*\..*\[\".*\"\]: Read" | grep -v 'data\.akeyless_secret\.okta_api_key: Read' | grep -v 'Refreshing state...' | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt  

        # Saves the plan in an environment variable so we can pull it back out
      - name: Put Plan in Env Var
        shell: bash
        if: steps.plan.outputs.exitcode == '2'
        run: |
          PLAN=$(cat plan.txt)
          echo $PLAN
          echo "PLAN<<EOF" >> $GITHUB_ENV
          echo "$PLAN" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV       

        # Pulls the plan out and posts it to github pull request with nice formatting and report
      - name: Post Plan to GitHub PR
        uses: mshick/add-pr-comment@5cd99bf9c186219af43341076f1fe9c09e5a9934
        if: github.event_name == 'pull_request' && steps.plan.outputs.exitcode == '2'
        with:
          repo-token: ${{ github.token }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            ```diff
            ${{ steps.validate.outputs.stdout }}
            ```           
            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            ```diff
            ${{ env.PLAN }}
            ```           
            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.working-dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

#      - name: Terraform Apply
#        id: apply
#        if: github.ref == 'refs/heads/main' && steps.plan.outcome == 'success'
#        run: terraform apply -no-color -auto-approve "tfplan"
#        continue-on-error: false
#
#      - uses: mshick/add-pr-comment@5cd99bf9c186219af43341076f1fe9c09e5a9934
#        if: github.ref == 'refs/heads/main' && steps.plan.outputs.exitcode == '2'
#        env:
#          APPLY: "terraform\n${{ steps.apply.outputs.stdout }}"
#        with:
#          allow-repeats: true
#          repo-token: ${{ github.token }}
#          repo-token-user-login: 'github-actions[bot]'
#          message: |
#            #### Terraform Apply \`${{ steps.apply.outcome }}\`
#            <details><summary>Show Apply</summary>
#      
#            ```diff
#            ${{ env.APPLY }}
#            ```
#      
#            </details>
#
#            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.working-dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
#
#
#
#
