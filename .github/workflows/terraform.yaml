---
name: 'Terraform plan'
on: 
  workflow_call:
    inputs:
      workload-id-provider:
        required: true
        type: string
      service-account:
        required: true
        type: string
      akeyless-api-gateway:
        required: true
        type: string
      akeyless-github-access-id:
        required: true
        type: string
      working-dir:
        required: true
        type: string
      token-format:
        required: false
        type: string
      access-token-scopes:
        required: false
        type: string
      aws-prod-account:
        required: false
        type: string
      aws-security-account:
        required: false
        type: string
      prod-branch:
        required: true
        type: string
     
jobs:
  Terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-dir}}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3

      # Uses Google workload identity federation to authenticate without keys, in security circle project.  Variables defined in security circle
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@ceee102ec2387dd9e844e01b530ccd4ec87ce955'
        with:
          workload_identity_provider: ${{ inputs.workload-id-provider }}
          service_account: ${{ inputs.service-account }}
          token_format: ${{ inputs.token-format }}
          access_token_scopes: ${{ inputs.access-token-scopes }}
          access_token_lifetime: '20m'

      # Akeyless Get Secrets will take the specified dynamic or static secrets and set them to their corresponding environment variables.  It will also
      # export github's JWT Token as AKEYLESS_AUTH_JWT (which their terraform provider uses for JWT authentication, and AUTH_TOKEN - The akeyless auth token
      # it gets back after authenticating, which can be used for certain things (such as ansible)
      - name: Akeyless Get Secrets
        id: get_auth_token
        uses: docker://us-west1-docker.pkg.dev/devopsre/akeyless-public/akeyless-action:latest
        with:
          api-url: ${{ inputs.akeyless-api-gateway }}
          access-id: ${{ inputs.akeyless-github-access-id }}

      - name: tfsec
        if: ${{ github.event_name == 'pull_request' }}
        uses: aquasecurity/tfsec-pr-commenter-action@main
        with:
          github_token: ${{ github.token }}
          soft_fail_commenter: true

      - name: Check for aws account variables
        id: aws-account-check
        shell: bash
        run: |
          if [ "${{ inputs.aws-security-account }}" != '' ]; then
            echo "security=true" >> $GITHUB_OUTPUT;
          else
            echo "security=false" >> $GITHUB_OUTPUT;
          fi

          if [ "${{ inputs.aws-prod-account }}" != '' ]; then
            echo "prod=true" >> $GITHUB_OUTPUT;
          else
            echo "prod=false" >> $GITHUB_OUTPUT;
          fi


      - name: Configure AWS Credentials - Security
        if: ${{ steps.aws-account-check.outputs.security == 'true' }}
        uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838
        with:
          aws-region: us-east-2
          role-to-assume: arn:aws:iam::${{ inputs.aws-security-account }}:role/github_actions_OIDC
          audience: https://github.com/celo-org

      - name: Configure AWS Credentials - PROD
        if: ${{ steps.aws-account-check.outputs.prod == 'true' }}
        uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838
        with:
          aws-region: us-east-2
          role-to-assume: arn:aws:iam::${{ inputs.aws-prod-account  }}:role/github_actions_OIDC
          audience: https://github.com/celo-org


      - name: set terraform variables
        env:
          SECURITY_ARN: "arn:aws:iam::${{ inputs.aws-security-account }}:role/github_actions_OIDC"
          PROD_ARN: "arn:aws:iam::${{ inputs.aws-prod-account }}:role/github_actions_OIDC"
        shell: bash
        run: |
             echo "TF_VAR_aws_web_identity_token=${{ env.GITHUB_AUTH_JWT  }}"  >> $GITHUB_ENV
             echo "TF_VAR_aws_role_arn_security=${{ env.SECURITY_ARN }}" >> $GITHUB_ENV
             echo "TF_VAR_aws_role_arn_prod=${{ env.PROD_ARN }}" >> $GITHUB_ENV
             echo "TF_VAR_aws_security_account=${{ inputs.aws-security-account }}" >> $GITHUB_ENV
             echo "TF_VAR_aws_prod_account=${{ inputs.aws-prod-account }}" >> $GITHUB_ENV
             echo "TF_VAR_google_credentials=${{ steps.auth.outputs.access_token }}" >> $GITHUB_ENV

      - uses: hashicorp/setup-terraform@62a66eef78e1543742cc8fabf333a1abddc00d37
        with:
          terraform_wrapper: true

#      - name: Terraform fmt
#        id: fmt
#        run: terraform fmt -check
#
#      - name: Terraform Init
#        id: init
#        run: terraform init -input=false
#
#      - name: Terraform Validate
#        id: validate
#        run: terraform validate -no-color
#
#      - name: Terraform Plan
#        id: plan
#        run: terraform plan -no-color -input=false -out=tfplan  "-detailed-exitcode"
#        continue-on-error: true
#
#      - name: Terraform Show Plan
#        id: showplan
#        run: terraform show tfplan "-no-color"
#
#        # Removes the refreshing from the plan output and then moves the + and - all the way to the left of the pull request to trigger github's colors
#      - name: Reformat Plan
#        shell: bash
#        if:  steps.plan.outputs.exitcode == '2'
#        run: |
#              echo '${{ steps.showplan.outputs.stdout }}' | head -n -3 | grep -v "data\..*\..*\[\".*\"\]: Read" | grep -v 'data\.akeyless_secret\.okta_api_key: Read' | grep -v 'Refreshing state...' | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt  
#
#        # Saves the plan in an environment variable so we can pull it back out
#      - name: Put Plan in Env Var
#        shell: bash
#        if: steps.plan.outputs.exitcode == '2'
#        run: |
#          PLAN=$(cat plan.txt)
#          echo $PLAN
#          echo "PLAN<<EOF" >> $GITHUB_ENV
#          echo "$PLAN" >> $GITHUB_ENV
#          echo "EOF" >> $GITHUB_ENV       
#
#
#        # Pulls the plan out and posts it to github pull request with nice formatting and report
#      - name: Post Plan to GitHub PR
#        uses: mshick/add-pr-comment@5cd99bf9c186219af43341076f1fe9c09e5a9934
#        if: github.event_name == 'pull_request' && steps.plan.outputs.exitcode == '2'
#        with:
#          repo-token: ${{ github.token }}
#          repo-token-user-login: 'github-actions[bot]'
#          message: |
#            #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
#            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
#            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
#            <details><summary>Validation Output</summary>
#
#            ```diff
#            ${{ steps.validate.outputs.stdout }}
#            ```           
#            </details>
#
#            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
#
#            <details><summary>Show Plan</summary>
#
#            ```diff
#            ${{ env.PLAN }}
#            ```           
#            </details>
#
#            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.working-dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
#
#
#      - name: Terraform Apply
#        id: apply
#        if: github.ref == 'refs/heads/main' && steps.plan.outcome == 'success'
#        run: terraform apply -no-color -auto-approve "tfplan"
#        continue-on-error: false
#
#      - uses: mshick/add-pr-comment@5cd99bf9c186219af43341076f1fe9c09e5a9934
#        if: github.ref == 'refs/heads/main' && steps.plan.outputs.exitcode == '2'
#        env:
#          APPLY: "terraform\n${{ steps.apply.outputs.stdout }}"
#        with:
#          allow-repeats: true
#          repo-token: ${{ github.token }}
#          repo-token-user-login: 'github-actions[bot]'
#          message: |
#            #### Terraform Apply \`${{ steps.apply.outcome }}\`
#            <details><summary>Show Apply</summary>
#      
#            ```diff
#            ${{ env.APPLY }}
#            ```
#      
#            </details>
#
#            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.working-dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
#

      - name: Terraform Init
        id: init
        run: terraform init
        shell: bash

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        shell: bash

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        shell: bash

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out=tfplan "-detailed-exitcode"
        shell: bash

      # Show Plan is used so we can get rid of all the "refreshing" comments that are noisy
      - name: Terraform Show Plan
        id: showplan
        run: terraform show tfplan "-no-color"
        continue-on-error: true
        shell: bash

      # Print the plan to file in this way to avoid problems with "'" in the plan
      - name: Print plan to file
        if: steps.plan.outputs.exitcode == '2'
        run: |
            cat > plan_temporal.txt <<'EOF'
            ${{ steps.showplan.outputs.stdout }}
            EOF
        shell: bash

      # Removes the refreshing from the plan output and then moves the + and - all the way
      # to the left of the pull request to trigger github's colors
      - name: Reformat Plan
        if: steps.plan.outputs.exitcode == '2'
        run: |
            sed -E 's/^([[:space:]]+)([-+])/\2\1/g' plan_temporal.txt > plan.txt
        shell: bash

      # Saves the plan in an environment variable so we can pull it back out
      - name: Put Plan in Env Var
        shell: bash
        if: steps.plan.outputs.exitcode == '2'
        run: |
          PLAN=$(cat plan.txt)
          check=${#PLAN}
          # Delimiting plan size to avoid error "Argument list too long" when posting the plan
          if [ "$check" -ge 65000 ];
          then
            PLAN='Terraform plan is too long to be posted in the PR comment. Please check the Action run to verify it'
          fi
          echo "$PLAN"
          { 
              echo "PLAN<<EOF"
              echo "$PLAN"
              echo "EOF"
          } >> "$GITHUB_ENV"

      - name: Post Plan to GitHub PR
        uses: mshick/add-pr-comment@a65df5f64fc741e91c59b8359a4bc56e57aaf5b1 # v2
        if: github.event_name == 'pull_request' && steps.plan.outputs.exitcode == '2'
        with:
          repo-token: ${{ github.token }}
          message-id: Plan ${{ inputs.module-dir }}
          message: |
            ### Terraform for ${{ inputs.module-dir }}\`
            #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            ```diff
            ${{ steps.validate.outputs.stdout }}
            ```           
            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            ```diff
            ${{ env.PLAN }}
            ```      
     
            </details>

            *Pusher: @${{ github.actor }}* 
            *Action: ${{ github.event_name }}*
            *Working Directory: ${{ env.WORKDIR }}*
            *Workflow: ${{ github.workflow }}*
            *Execution link: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}*

      - name: Terraform Apply
        id: apply
        if: github.ref == "refs/heads/main' && github.event_name == 'push' && steps.plan.outcome == 'success'
        shell: bash
        run: terraform apply -no-color -auto-approve "tfplan"

      - name: Post Apply output to GitHub PR after merging
        uses: mshick/add-pr-comment@a65df5f64fc741e91c59b8359a4bc56e57aaf5b1 #v2
        if: github.ref == 'refs/heads/main' && steps.plan.outputs.exitcode == '2'
        env:
          APPLY: "terraform\n${{ steps.apply.outputs.stdout }}"
        with:
          allow-repeats: true
          message-id: Apply ${{ inputs.module-dir }}
          repo-token: ${{ github.token }}
          message: |
            ### Terraform for ${{ inputs.module-dir }}\`
            #### Terraform Apply \`${{ steps.apply.outcome }}\`
            <details><summary>Show Apply</summary>
            ```diff
            ${{ env.APPLY }}
            ```
            </details>
            *Pusher: @${{ github.actor }}* 
            *Action: ${{ github.event_name }}*
            *Working Directory: ${{ env.WORKDIR }}*
            *Workflow: ${{ github.workflow }}*
            *Execution link: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}*


