---
name: 'Terraform plan'
on:
  workflow_call:
    inputs:
     workload-id-provider:
        required: true
        type: string
      service-account:
        required: true
        type: string
      access-token-lifetime:
        description: "GCP token expiration timeout"
        required: false
        type: string
        default: "20m" 
      artifact-registry:
        required: true
        type: string
      tags:
        required: true
        type: string
      platforms:
        type: string
        default: "linux/amd64"
      context:
        required: true
        type: string
      file:
        required: false
        type: string
      build-args:
        required: false
        type: string
      provenance:
        type: boolean
        required: false
        default: true
      docker-gcp-registries:
        type: string
        description: "GCP Artifact registry to login into. Check https://cloud.google.com/artifact-registry/docs/docker/authentication"
        default: "us-west1-docker.pkg.dev,us-central1-docker.pkg.dev"
      runs_on:
        default: "['ubuntu-latest']"
        type: string
        description: "github runner tags"
      timeout-minutes:
        default: 30
        type: number
        description: "Workflow timeout"
      environment:
        default: ''
        description: "Deployment environment in github"
        type: string
      debug_enabled:
        default: false
        required: false
        type: boolean
        description: "run tmate for troubleshooting"
      pr-comment:
        default: true
        type: boolean        
      summary:
        default: true
        type: boolean
      trivy-enabled:
        default: true
        type: boolean
      trivy-skip-dirs:
        type: string

jobs:
  terraform:
    runs-on: ${{ fromJson(inputs.runs_on) }}
    timeout-minutes: ${{ inputs.debug_enabled && 60 || inputs.timeout-minutes }}
    defaults:
      run:
        working-directory: ${{ inputs.working-dir }}
        shell: bash
    environment:
      name: ${{ inputs.environment }}
      url: ${{ inputs.environment-url }}
    steps:
      - name: Validate Inputs
        run: |
          if [[ -z "${{ inputs.workload-id-provider }}" || -z "${{ inputs.service-account }}" ]]; then
            echo "::error::Required inputs are missing: workload-id-provider and service-account."
            exit 1
          fi

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@e5c7151931ca95bad1c6f4190c730ecf8c7dde48
        if: inputs.debug_enabled == true 
        with:
          detached: true
          limit-access-to-actor: true

      - name: Harden Runner
        if: runner.environment == 'github-hosted'
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit       

      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: Akeyless Get Secrets
        id: get_auth_token
        uses: docker://us-west1-docker.pkg.dev/devopsre/akeyless-public/akeyless-action:latest
        with:
          api-url: ${{ inputs.akeyless-api-gateway }}
          access-id: ${{ inputs.akeyless-github-access-id }}

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ inputs.workload-id-provider }}
          service_account: ${{ inputs.service-account }}
          token_format: ${{ inputs.token-format }}
          access_token_scopes: ${{ inputs.access-token-scopes }}
          access_token_lifetime: '20m'

      - name: Run Trivy vulnerability scanner
        uses: celo-org/trivy-composite-action@v1.0.0-alpha
        with:
          scan-type: 'fs'
          scan-ref: ${{ inputs.working-dir }}
          pr-comment: ${{ inputs.pr-comment }}
          summary: ${{ inputs.summary }}

      - name: set terraform variables
        shell: bash
        run: echo "TF_VAR_google_credentials=${{ steps.auth.outputs.access_token }}" >> $GITHUB_ENV

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: true

      - name: Terraform Init
        id: init
        run: terraform init
        shell: bash

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        shell: bash

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        shell: bash

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out=tfplan "-detailed-exitcode"
        shell: bash

      - name: Terraform Show Plan
        id: showplan
        run: terraform show tfplan "-no-color"
        continue-on-error: true
        shell: bash

      - name: Print plan to file
        if: steps.plan.outputs.exitcode != '0'
        run: |
            cat > plan_temporal.txt <<'EOF'
            ${{ steps.showplan.outputs.stdout }}
            EOF
        shell: bash

      - name: Reformat Plan
        if: steps.plan.outputs.exitcode != '0'
        run: |
            sed -E 's/^([[:space:]]+)([-+])/\2\1/g' plan_temporal.txt > plan.txt
        shell: bash

      - name: Put Plan in Env Var
        shell: bash
        if: steps.plan.outputs.exitcode != '0'
        run: |
          PLAN=$(cat plan.txt)
          check=${#PLAN}
          if [ "$check" -ge 65000 ]; then
            echo "::warning::Terraform plan is too long to be posted in the PR comment. Please check the Action run to verify it"
            PLAN='Plan is too large. Refer to the Action logs.'
          fi
          echo "PLAN<<EOF" >> "$GITHUB_ENV"
          echo "$PLAN" >> "$GITHUB_ENV"
          echo "EOF" >> "$GITHUB_ENV"

      - name: Post Plan to GitHub PR
        uses: mshick/add-pr-comment@b8f338c590a895d50bcbfa6c5859251edc8952fc # v2
        if: github.event_name == 'pull_request' && steps.plan.outputs.exitcode != '0' && inputs.pr-comment == true
        env:
          WORKDIR: ${{ inputs.working-dir }}
        with:
          allow-repeats: true
          repo-token: ${{ github.token }}
          message-id: Plan ${{ env.WORKDIR }}
          message: |
            ### Terraform for ${{ env.WORKDIR }}
            #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            ```diff
            ${{ steps.validate.outputs.stdout }}
            ```
            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            ```diff
            ${{ env.PLAN }}
            ```

            </details>

            *Pusher: @${{ github.actor }}*
            *Action: ${{ github.event_name }}*
            *Working Directory: ${{ env.WORKDIR }}*
            *Workflow: ${{ github.workflow }}*
            *Execution link: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}*

      - name: Terraform Apply
        id: apply
        if: github.ref_name == github.event.repository.default_branch && github.event_name == 'push' && steps.plan.outcome == 'success'
        shell: bash
        run: terraform apply -no-color -auto-approve "tfplan"

      - name: Build Report
        if: always() && github.ref_name == github.event.repository.default_branch && steps.apply.outputs.stdout != '' && ( inputs.summary || inputs.pr-comment ) && steps.plan.outputs.exitcode != '0'
        id: build-report
        shell: bash
        env:
          APPLY: "${{ steps.apply.outputs.stdout }}"
          WORKDIR: "${{ inputs.working-dir }}"
        run: |
          echo '${{ env.APPLY }}' > apply.txt
          {
              echo "### Terraform for ${{ env.WORKDIR }}"
              echo "#### Terraform Apply ${{ steps.apply.outcome }}"
              echo "<details><summary>Show Apply</summary>"
              echo ""
              echo '```'
              cat apply.txt
              echo '```'
              echo "</details>"
              echo ""
              echo "*Pusher: @${{ github.actor }}* \\"
              echo "*Action: ${{ github.event_name }}* \\"
              echo "*Working Directory: ${{ env.WORKDIR }}* \\"
              echo "*Workflow: ${{ github.workflow }}* \\"
              echo "*Execution link: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}* \\"
          } > 'report.txt'
          echo "report=report.txt" >> $GITHUB_OUTPUT     

      - name: Post Scan Results to GitHub PR
        uses: mshick/add-pr-comment@b8f338c590a895d50bcbfa6c5859251edc8952fc # v2 
        if: always() && github.ref_name == github.event.repository.default_branch && inputs.pr-comment && steps.build-report.outputs.report != '' && steps.plan.outputs.exitcode != '0'
        with:
          allow-repeats: true
          repo-token: ${{ github.token }}
          message-id: Terraform Apply ${{ github.workflow }}
          message-path: "${{ inputs.working-dir }}/${{ steps.build-report.outputs.report }}"

      - name: Post Scan Results to Workflow Summary
        if: always() && github.ref_name == github.event.repository.default_branch && inputs.summary && steps.build-report.outputs.report != '' && steps.plan.outputs.exitcode != '0'
        shell: bash
        run: |
          echo "### Workflow Summary" >> $GITHUB_STEP_SUMMARY
          while IFS= read -r line; do
            echo $line >> $GITHUB_STEP_SUMMARY
          done < "${{ steps.build-report.outputs.report }}"
