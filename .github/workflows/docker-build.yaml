---
name: 'Run Container Workflow'
on: 
  workflow_call:
    inputs:
      workload-id-provider:
        required: true
        type: string
      service-account:
        required: true
        type: string
      access-token-lifetime:
        description: "GCP token expiration timeout"
        required: false
        type: string
        default: "20m" 
      artifact-registry:
        required: true
        type: string
      tags:
        required: true
        type: string
      platforms:
        type: string
        default: "linux/amd64"
      context:
        required: true
        type: string
      file:
        required: false
        type: string
      build-args:
        required: false
        type: string
      provenance:
        type: boolean
        required: false
        default: true
      docker-gcp-registries:
        type: string
        description: "GCP Artifact registry to login into. Check https://cloud.google.com/artifact-registry/docs/docker/authentication"
        default: "us-west1-docker.pkg.dev,us-central1-docker.pkg.dev"
      runs_on:
        default: "['ubuntu-latest']"
        type: string
        description: "github runner tags"
      timeout-minutes:
        default: 30
        type: number
        description: "Workflow timeout"
      environment:
        default: ''
        description: "Deployment environment in github"
        type: string
      debug_enabled:
        default: false
        required: false
        type: boolean
        description: "run tmate for troubleshooting"
      pr-comment:
        default: true
        type: boolean        
      summary:
        default: true
        type: boolean
      trivy-enabled:
        default: true
        type: boolean
      trivy-timeout:
        default: 15m
        type: string
        description: "trivy timeout 15 minutes"
      trivy-skip-dirs:
        type: string

jobs:
  auth-build-push-scan-container:
    runs-on: ${{ fromJson(inputs.runs_on) }}
    timeout-minutes: ${{ inputs.timeout-minutes }}
    defaults:
      run:
        shell: bash 
    # Specify an environment here if using deployment environments
    environment:
      name: ${{ inputs.environment }}
      url: "${{ inputs.environment != '' && format('https://{0}:{1}', inputs.artifact-registry, inputs.tags) || '' }}"
    permissions: # Required for workload identity auth and push the trivy results to GitHub
      actions: read
      contents: write
      id-token: write
      security-events: write
      attestations: write
      pull-requests: write
    steps:
      # Security policy docker is configured in step security app
      # Policy can be seen here https://app.stepsecurity.io/github/celo-org/actions/policies/docker
      # disable-sudo is set to false if debug is true, because tmate requires root to work.
      - name: Harden Runner
        if: runner.environment == 'github-hosted'
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit
#          policy: ${{ inputs.debug_enabled == true && 'docker-debug' || 'docker' }}


      # Only turns on tmate if workflow_dispatch set debug to true.
      # limit-access-to-actor or some other security precaution should be added
      # so anyone with the link can't ssh in without a key.
      # Currently detaches and runs concurrently with workflow, can change
      # if needed

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@e5c7151931ca95bad1c6f4190c730ecf8c7dde48
        if: inputs.debug_enabled == true 
        with:
          detached: true
          limit-access-to-actor: true
    
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: Check if GHAS is Enabled
        uses: actions/github-script@v7
        id: ghas-check
        with:
          script: |
            const [owner, repo] = '${{ github.repository }}'.split("/");
            const res = await github.rest.repos.get({ owner, repo });
            const isPrivate = res.data.private;
            const hasGhas = res.data.security_and_analysis?.advanced_security?.status === 'enabled';
            if (isPrivate && !hasGhas) {
              core.warning('GHAS is NOT enabled and repo is private. Cannot upload SARIF.');
              return false;
            }
            return true;

      # Split the artifact-registry to give us both the registry url and app/image name
      - name: Split location and app names
        id: split
        env:
          REGISTRY: ${{ inputs.artifact-registry }}
        run: |
            location=${REGISTRY%%/*}
            app_name=${REGISTRY##*/}
            echo "::debug::location=$location"
            echo "::debug::app_name=$app_name"
            echo "location=$location" >> $GITHUB_OUTPUT
            echo "app_name=$app_name" >> $GITHUB_OUTPUT

      - name: Run Trivy Scan
        id: trivy-fs
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref:  ${{ inputs.context }}
          timeout: ${{ inputs.trivy-timeout }}
          vuln-type: "os,library"
          severity: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
          format: json
          output: trivy-${{ steps.split.outputs.app_name }}-${{ github.run_id }}-fs.json
          skip-dirs: ${{ inputs.trivy-skip-dirs }}

      - name: Convert Report to Text and sarif
        if: ${{ inputs.summary || inputs.pr-comment }}
        id: convert-trivy
        env:
          text-file: trivy-${{ steps.split.outputs.app_name }}-${{ github.run_id }}-fs.txt
          json-file: trivy-${{ steps.split.outputs.app_name }}-${{ github.run_id }}-fs.json
          sarif-file: trivy-${{ steps.split.outputs.app_name }}-${{ github.run_id }}-fs.sarif
        shell: bash
        run: |
          trivy convert --format table --output ${{ env.text-file }} ${{ env.json-file }}
          trivy convert --format table --output ${{ env.sarif-file }} ${{ env.json-file }}
          if [ "$(stat -c%s ${{ env.text-file }})" -gt 0 ]; then
            echo "text=${{ env.text-file }}" >> $GITHUB_OUTPUT
            echo "sarif=${{ env.sarif-file }}" >> $GITHUB_OUTPUT
          else
            echo "text=" >> $GITHUB_OUTPUT  # Explicitly unset the output
            echo "sarif=" >> $GITHUB_OUTPUT  # Explicitly unset the output
          fi

      - name: Post PR Comment with Trivy Report
        if: ${{ inputs.pr-comment && steps.convert-trivy.outputs.text != '' }}
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### Trivy Image Scan Report
            trivy-${{ steps.split.outputs.app_name }}-${{ github.run_id }}-fs
            ```txt
            $(cat ${{ steps.convert-trivy.outputs.text }})
            ```

      - name: Upload JSON Report
        uses: actions/upload-artifact@v4
        env:
           TRIVY_FILE: trivy-${{ steps.split.outputs.app_name }}-${{ github.run_id }}-fs.json
        with:
          name: ${{ env.TRIVY_FILE }}
          path: ${{ env.TRIVY_FILE }}

      - name: Upload SARIF to Security Tab
        if: fromJSON(steps.ghas-check.outputs.result)
        env:
           TRIVY_FILE: trivy-${{ steps.split.outputs.app_name }}-${{ github.run_id }}-fs.json
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-${{ env.TRIVY_FILE }}-${{ github.run_id }}-fs.json
          category: fs-${{ env.TRIVY_FILE }}

      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ inputs.workload-id-provider }}
          service_account: ${{ inputs.service-account }}
          access_token_lifetime: ${{ inputs.access-token-lifetime }}
          token_format: access_token 

      - name: Login to GAR
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.artifact-registry }}
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Build, push and scan the container
        uses: celo-org/docker-build-composite-action@v1.0.0-refactor
        id: docker-build-scan
        with:
          platforms: ${{ inputs.platforms }}
          registry: ${{ inputs.artifact-registry }}
          tags: ${{ inputs.tags }}
          context: ${{ inputs.context }}
          dockerfile: ${{ inputs.file }}
          build-args: ${{ inputs.build-args }}
          push: ${{ fromJSON(true) }}
          summary: ${{ inputs.summary }}
          pr-comment: ${{ inputs.pr-comment }} 
          trivy-skip-dirs: ${{ inputs.trivy-skip-dirs }}
          skip-setup-trivy: true
          trivy-enabled: ${{ inputs.trivy-enabled }}

      - name: Upload SARIF to Security Tab
        if: fromJSON(steps.ghas-check.outputs.result)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.docker-build-scan.outputs.sarif-file }}
          category: image-${{ steps.split.outputs.app_name }}


