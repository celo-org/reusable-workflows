name: "Build docker image"
description: "Build a docker image"
inputs:
  runner_platorm:
    description: "Platform of the github runner for build testing"
    required: false
    default: linux/amd64
  platforms:
    description: "Image platform(s)"
    required: true
    default: linux/amd64
  context:
    description: "Dockerfile Build context path"
    required: true
  dockerfile:
    description: "Dockerfile path"
    required: true
  push:
    description: "Push the image to the remote repository. Requires to be pre-authenticated to the registry."
    required: true
    default: 'true'
  build-args:
    description: "List of build-time variables"
    required: false
  registry:
    description: "Registry to push the image to"
    required: true
  app-name:
    description: "sets the registry subfolder like {registry}/{app-name}:{tag}"
    required: true
  force-extra-tag:
    description: > 
      Sets one specific tag in addition to the automatically inferred 
      'release', 'edge', 'latest' and 'sha' tags
    required: false
    default: ""
  trivy:
    description: "Run trivy scan"
    required: true
    default: 'true'

runs:
  using: "composite"
  steps:

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Docker metadata
      id: meta 
      uses: docker/metadata-action@v5
      with:
        images: ${{inputs.registry}}/${{ inputs.app-name }}
        # see https://github.com/docker/metadata-action?tab=readme-ov-file#tags-input
        # for reference. 
        # "edge" is the latest on the default branch 
        #   - this is mirrored with the "latest" tag for backwards compatibility
        #  An additional tag can be forced with inputs.force-extra-tag by the user.
        tags: |
          type=semver,pattern={{version}}
          type=edge
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha
          ${{ inputs.force-extra-tag != '' && format('type=raw,value={0}', inputs.force-extra-tag) || '' }}

    - name: Build container image
      uses: docker/build-push-action@v6
      id: docker-build
      with:
        platforms: ${{ inputs.runner_platform }}
        file: ${{ inputs.dockerfile }}
        context: ${{ inputs.context }}
        cache-from: type=registry,ref=${{ inputs.registry }}/${{ inputs.app-name }}:buildcache
        cache-to: type=local,dest=cache
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        load: true
        build-args: ${{ inputs.build-args }}

    - name: Test
      shell: bash
      run: |
        echo "Scanning for oidc credentials"
        set +e
        docker create --name="tmp_container" ${{ steps.docker-build.outputs.imageid }}
        found=$(docker export tmp_container | tar tf - | grep -e "gha-creds-.*.json" | wc -l)
        if [ $found -ge 1 ]; then
            echo "Found oidc credentials"
            echo "Add the following line to your .dockerignore file"
            echo "gha-creds-*.json"
        fi
        exit "$found"

    - name: Build and push
      if: ${{ inputs.push }} == 'true'
      uses: docker/build-push-action@v6
      id: docker-build-push
      with:
        platforms: ${{ inputs.platforms }}
        file: ${{ inputs.dockerfile }}
        context: ${{ inputs.context }}
        push: ${{ fromJSON(inputs.push) }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: ${{ inputs.build-args }}
        cache-from: type=local,src=cache
        cache-to: type=registry,ref=${{ inputs.registry }}/${{ inputs.app-name }}:buildcache,mode=max
        provenance: ${{ fromJSON(true) }}

    - uses: sigstore/cosign-installer@main

    - name: Sign container image
      env:
        COSIGN_EXPERIMENTAL: "true"
      shell: bash
      run: |
        cosign sign --yes ${{ inputs.registry }}/${{ inputs.app-name }}@${{ steps.docker-build-push.outputs.digest }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      if: ${{ inputs.trivy == 'true' }}
      env:
        REGISTRY: ${{ inputs.registry }}/${{ inputs.app-name }}
      with:
        image-ref: "${{ steps.meta.outputs.version }}"
        timeout: 15m
        vuln-type: "os,library"
        severity: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
        format: "sarif"
        output: "trivy-results.sarif"

    - name: Upload Trivy scan results to GitHub Security tab
      if: ${{ inputs.trivy == 'true' }}
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: "trivy-results.sarif"
