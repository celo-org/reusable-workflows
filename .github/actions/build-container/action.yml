name: "Build docker image"
description: "Build a docker image"
inputs:
  platforms:
    description: "Image platform(s)"
    required: true
    default: linux/amd64
  context:
    description: "Dockerfile Build context path"
    required: true
  dockerfile:
    description: "Dockerfile path"
    required: true
  push:
    description: "Push the image to the remote repository. Either push or load must be true"
    required: true
    default: 'true'
  load:
    description: "Load the image in the local runner. Cannot be true if #platforms > 1"
    required: true
    default: 'false'
  registry:
    description: "Registry to push the image to"
    required: true
  tag:
    description: "Image tag"
    required: true
    default: latest
  gcp-login:
    description: "Authenticate to GCP Artifact Registry using workload identity"
    required: true
    default: 'false'
  workload-id-provider: 
    description: "Workload identity provider"
    required: false
  service-account: 
    description: "Service account to use"
    required: false

runs:
  using: "composite"
  steps:
    - id: auth
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        workload_identity_provider: ${{ inputs.workload-id-provider }}
        service_account: ${{ inputs.service-account }}
        access_token_lifetime: '20m'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: Split location and app names
      id: split
      env:
        REGISTRY: ${{ inputs.registry }}
      shell: bash
      run: |
          echo "location=${REGISTRY%%/*}"
          echo "app_name=${REGISTRY##*/}"
          echo "location=${REGISTRY%%/*}" >> $GITHUB_OUTPUT
          echo "app_name=${REGISTRY##*/}" >> $GITHUB_OUTPUT

    - name: 'Configure docker for gcloud auth'
      shell: bash
      run: 'gcloud auth configure-docker ${{ steps.split.outputs.location }}'

    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      with:
        limit-access-to-actor: true

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build container image
      uses: docker/build-push-action@v4
      with:
        platforms: ${{ inputs.platforms }}
        file: ${{ inputs.dockerfile }}
        context: ${{ inputs.context }}
        push: ${{ fromJSON(inputs.push) }}
        tags: ${{ inputs.registry }}:${{ inputs.tag }}
        load: ${{ fromJSON(inputs.load) }}
        build-args: GETH_COMMIT={{ github.sha }}
        cache-from: type=registry,ref=${{ inputs.registry }}:buildcache
        cache-to: type=registry,ref=${{ inputs.registry }}:buildcache,mode=max
        provenance: ${{ fromJSON(true) }}

    - uses: sigstore/cosign-installer@main

    - name: Sign container image
      env:
        COSIGN_EXPERIMENTAL: "true"
      shell: bash
      run: |
        cosign sign --yes ${{ inputs.registry }}@${{ steps.docker-build-push.outputs.digest }}

    - name: Run Trivy vulnerability scanner
      if: ${{ inputs.trivy == true }}
      uses: aquasecurity/trivy-action@master
      env:
        REGISTRY: ${{ inputs.registry }}
      with:
        image-ref: "${{ inputs.registry }}:${{ inputs.tag }}"
        timeout: 5m
        vuln-type: "os,library"
        severity: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
        format: "sarif"
        output: "trivy-results.sarif"

    - name: Upload Trivy scan results to GitHub Security tab
      if: ${{ inputs.trivy == true }}
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: "trivy-results.sarif"
